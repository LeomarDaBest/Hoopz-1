-- Move PracticeArea if necessary
local practiceArea = workspace:WaitForChild("PracticeArea", 5)
if practiceArea then
    print("PracticeArea found.")
    local courts = workspace:FindFirstChild("Courts")
    if courts then
        print("Courts folder found.")
        practiceArea.Parent = courts
        print("PracticeArea successfully moved to Courts.")
    else
        warn("Courts folder not found in workspace. Ensure it exists.")
    end
else
    warn("PracticeArea not found in workspace after waiting. Ensure the name and structure are correct.")
end

-- Camera Locking System
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Player = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Set Power Value
local power = 85

-- Create a highlight effect
local function CreateHighlight(torso)
    local highlight = Instance.new("SelectionBox")
    highlight.Adornee = torso
    highlight.Parent = torso
    highlight.LineThickness = 0.05
    highlight.SurfaceTransparency = 0.2
    highlight.Color3 = Color3.fromRGB(0, 255, 0) -- Green highlight
    return highlight
end

local torsoHighlight = nil

-- Wait for necessary UI objects
local success, Button = pcall(function()
    return Player:WaitForChild("PlayerGui"):WaitForChild("PowerUI"):WaitForChild("CursorButton")
end)

if not success or not Button then
    warn("Failed to find CursorButton in PowerUI. Ensure the UI exists and is properly loaded.")
    return
else
    print("CursorButton found successfully.")
end

-- Function to check if the player has a ball
local function PlayerHasBall()
    local character = Player.Character or Player.CharacterAdded:Wait()
    return character:FindFirstChild("Basketball") ~= nil
end

-- Function to find the closest goal
local function GetClosestGoal()
    local closestDistance = math.huge
    local closestGoal = nil

    for _, obj in pairs(workspace.Courts:GetDescendants()) do
        if obj.Name == "Swish" and obj.Parent:FindFirstChildOfClass("TouchTransmitter") then
            local character = Player.Character or Player.CharacterAdded:Wait()
            local torso = character:FindFirstChild("HumanoidRootPart")

            if torso then
                local distance = (torso.Position - obj.Parent.Position).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestGoal = obj.Parent
                end
            end
        end
    end

    return closestGoal, closestDistance
end

-- Function to determine the aiming vector based on distance
local function GetAimingVector(distance)
    if power == 85 then
        if distance > 54 and distance < 60 then
            return Vector3.new(0, 29, 0)
        elseif distance > 61 and distance < 64 then
            return Vector3.new(0, 30, 0)
        elseif distance > 65 and distance < 68 then
            return Vector3.new(0, 25, 0)
        elseif distance > 69 and distance < 69 then
            return Vector3.new(0, 19, 0)
        elseif distance > 70 and distance < 74.2 then
            return Vector3.new(0, 16, 0)
        elseif distance > 74.3 and distance < 74.59 then
            return Vector3.new(0, 6, 0)
        end
    end
    return Vector3.new(0, 0, 0)
end

-- Function to check if the player is within range
local function IsWithinRange(distance)
    return (
        (distance > 57 and distance < 60) or
        (distance > 61 and distance < 64) or
        (distance > 65 and distance < 68) or
        (distance > 69 and distance < 69) or
        (distance > 70 and distance < 74.2) or
        (distance > 74.3 and distance < 74.59)
    )
end

-- Variables to manage camera locking
local isLocking = false
local connection

-- Function to update highlighting continuously
local function UpdateHighlight()
    RunService.RenderStepped:Connect(function()
        local closestGoal, distance = GetClosestGoal()
        local character = Player.Character or Player.CharacterAdded:Wait()
        local torso = character:FindFirstChild("HumanoidRootPart")

        if torso then
            -- Apply highlighting if within range
            if IsWithinRange(distance) then
                if not torsoHighlight then
                    torsoHighlight = CreateHighlight(torso)
                end
            else
                if torsoHighlight then
                    torsoHighlight:Destroy()
                    torsoHighlight = nil
                end
            end
        end
    end)
end

-- Start locking the camera to the nearest goal
local function StartLocking()
    if isLocking then return end
    isLocking = true

    connection = RunService.RenderStepped:Connect(function()
        local closestGoal, distance = GetClosestGoal()
        if closestGoal then
            local character = Player.Character or Player.CharacterAdded:Wait()
            local torso = character:FindFirstChild("HumanoidRootPart")

            if torso then
                -- Apply camera lock
                local aimingVector = GetAimingVector(distance)
                local goalPosition = closestGoal.Position + aimingVector
                Camera.CFrame = CFrame.new(Camera.CFrame.Position, goalPosition)
            end
        end
    end)

    -- Simulate button click (only if player has the ball)
    if PlayerHasBall() and Button then
        firesignal(Button.MouseButton1Click)
        print("Button clicked. Player had the ball.")
    else
        warn("Player does not have the ball, shot not triggered.")
    end
end

-- Stop locking the camera
local function StopLocking()
    if not isLocking then return end
    isLocking = false

    if connection then
        connection:Disconnect()
        connection = nil
    end

    -- Remove highlight when locking stops
    if torsoHighlight then
        torsoHighlight:Destroy()
        torsoHighlight = nil
    end
end

-- Detect when the player jumps
local function onJumping()
    if PlayerHasBall() then
        print("Player jumped with the ball. Locking onto the closest goal.")
        StartLocking()
    else
        print("Player jumped without the ball. No action taken.")
    end
end

-- Connect the jumping event
local character = Player.Character or Player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

humanoid.Jumping:Connect(onJumping)
humanoid.StateChanged:Connect(function(_, newState)
    if newState == Enum.HumanoidStateType.Landed then
        StopLocking()
    end
end)

-- Start real-time range checking and highlighting
UpdateHighlight()

local TweenService = game:GetService("TweenService") local Players = game:GetService("Players") local RunService = game:GetService("RunService") local VirtualInputManager = game:GetService("VirtualInputManager") local Player = Players.LocalPlayer local Camera = workspace.CurrentCamera

-- Move PracticeArea if necessary local practiceArea = workspace:WaitForChild("PracticeArea", 5) if practiceArea then local courts = workspace:FindFirstChild("Courts") if courts then practiceArea.Parent = courts end end

-- Wait for necessary UI objects local success, Button = pcall(function() return Player:WaitForChild("PlayerGui"):WaitForChild("PowerUI"):WaitForChild("CursorButton") end)

if not success or not Button then return end

-- Function to check if the player has a ball local function PlayerHasBall() local character = Player.Character or Player.CharacterAdded:Wait() return character:FindFirstChild("Basketball") ~= nil end

-- Function to find the closest goal local function GetClosestGoal() local closestDistance = math.huge local closestGoal = nil

for _, obj in pairs(workspace.Courts:GetDescendants()) do
    if obj.Name == "Swish" and obj.Parent:IsA("BasePart") then
        local character = Player.Character or Player.CharacterAdded:Wait()
        local torso = character:FindFirstChild("HumanoidRootPart")

        if torso then
            local distance = (torso.Position - obj.Parent.Position).Magnitude
            if distance < closestDistance then
                closestDistance = distance
                closestGoal = obj.Parent
            end
        end
    end
end

return closestGoal, closestDistance

end

local isLocking = false local connection

-- Start locking the camera to the nearest goal (instant and smooth) local function StartLocking() if isLocking then return end isLocking = true

connection = RunService.RenderStepped:Connect(function()
    local closestGoal, distance = GetClosestGoal()
    if closestGoal then
        local vector
        if distance >= 58 and distance <= 61 then
            vector = Vector3.new(0, 9, 0)
        elseif distance == 62 then
            vector = Vector3.new(0, 8, 0)
        elseif distance == 63 then
            vector = Vector3.new(0, 14, 0)
        elseif distance >= 67 and distance <= 72.4 then
            vector = Vector3.new(0, 19, 0)
        else
            vector = Vector3.new(0, 9, 0) -- Default value if distance doesn't match
        end

        local goalPosition = closestGoal.Position + vector
        Camera.CFrame = CFrame.new(Camera.CFrame.Position, goalPosition) -- Instant lock
    end
end)

if PlayerHasBall() and Button then
    task.wait(0.25)
    local buttonPosition = Button.AbsolutePosition + Button.AbsoluteSize / 2
    VirtualInputManager:SendMouseButtonEvent(buttonPosition.X, buttonPosition.Y, 0, true, game, 1)
    VirtualInputManager:SendMouseButtonEvent(buttonPosition.X, buttonPosition.Y, 0, false, game, 1)
end

end

-- Stop locking the camera local function StopLocking() if not isLocking then return end isLocking = false if connection then connection:Disconnect() connection = nil end end

-- Detect when the player jumps local character = Player.Character or Player.CharacterAdded:Wait() local humanoid = character:WaitForChild("Humanoid")

humanoid.Jumping:Connect(function() if PlayerHasBall() then StartLocking() end end)

humanoid.StateChanged:Connect(function(_, newState) if newState == Enum.HumanoidStateType.Landed then StopLocking() end end)


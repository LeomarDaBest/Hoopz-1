local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Player = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Move PracticeArea if necessary
local practiceArea = workspace:WaitForChild("PracticeArea", 5) 
if practiceArea then
    print("PracticeArea found.")
    local courts = workspace:FindFirstChild("Courts")
    if courts then
        print("Courts folder found.")
        practiceArea.Parent = courts
        print("PracticeArea successfully moved to Courts.")
    else
        warn("Courts folder not found in workspace. Ensure it exists.")
    end
else
    warn("PracticeArea not found in workspace after waiting. Ensure the name and structure are correct.")
end

-- Wait for necessary UI objects
local success, Button = pcall(function()
    return Player:WaitForChild("PlayerGui"):WaitForChild("PowerUI"):WaitForChild("CursorButton")
end)

if not success or not Button then
    warn("Failed to find CursorButton in PowerUI. Ensure the UI exists and is properly loaded.")
    return
else
    print("CursorButton found successfully.")
end

-- Function to check if the player has a ball
local function PlayerHasBall()
    local character = Player.Character or Player.CharacterAdded:Wait()
    return character:FindFirstChild("Basketball") ~= nil 
end

-- Function to find the closest goal
local function GetClosestGoal()
    local closestDistance = math.huge
    local closestGoal = nil

    for _, obj in pairs(workspace.Courts:GetDescendants()) do
        if obj.Name == "Swish" and obj.Parent:IsA("BasePart") then
            local character = Player.Character or Player.CharacterAdded:Wait()
            local torso = character:FindFirstChild("HumanoidRootPart")

            if torso then
                local distance = (torso.Position - obj.Parent.Position).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestGoal = obj.Parent
                end
            end
        end
    end

    return closestGoal
end

local isLocking = false
local connection

-- Start locking the camera to the nearest goal (instant and smooth)
local function StartLocking()
    if isLocking then return end
    isLocking = true

    connection = RunService.RenderStepped:Connect(function()
        local closestGoal = GetClosestGoal()
        if closestGoal then
            local character = Player.Character or Player.CharacterAdded:Wait()
            local head = character:FindFirstChild("Head")

            if head then
                -- Aim precisely at (0, 8, 0) above the goal
                local goalPosition = closestGoal.Position + Vector3.new(0, 8, 0)

                -- Instant and smooth camera locking
                Camera.CFrame = CFrame.new(Camera.CFrame.Position, goalPosition) -- Instant lock without delay
            end
        end
    end)

    -- Simulate button click (only if player has the ball)
    if PlayerHasBall() and Button then
        -- Add a 0.25-second delay before simulating the button click
        task.wait(0.25)

        -- Get Button Position
        local buttonPosition = Button.AbsolutePosition + Button.AbsoluteSize / 2

        -- Simulate real mouse click on the UI button
        VirtualInputManager:SendMouseButtonEvent(buttonPosition.X, buttonPosition.Y, 0, true, game, 1)
        VirtualInputManager:SendMouseButtonEvent(buttonPosition.X, buttonPosition.Y, 0, false, game, 1)

        print("Button clicked. Player had the ball.")
    else
        warn("Player does not have the ball, shot not triggered.")
    end
end

-- Stop locking the camera
local function StopLocking()
    if not isLocking then return end
    isLocking = false

    if connection then
        connection:Disconnect()
        connection = nil
    end
end

-- Detect when the player jumps
local character = Player.Character or Player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

humanoid.Jumping:Connect(function()
    if PlayerHasBall() then
        print("Player jumped with the ball. Locking onto the closest goal.")
        StartLocking()
    else
        print("Player jumped without the ball. No action taken.")
    end
end)

humanoid.StateChanged:Connect(function(_, newState)
    if newState == Enum.HumanoidStateType.Landed then
        StopLocking()
    end
end)

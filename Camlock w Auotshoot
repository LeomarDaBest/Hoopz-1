local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Player = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Move PracticeArea if necessary
local practiceArea = workspace:WaitForChild("PracticeArea", 5) 
if practiceArea then
    print("PracticeArea found.")
    local courts = workspace:FindFirstChild("Courts")
    if courts then
        print("Courts folder found.")
        practiceArea.Parent = courts
        print("PracticeArea successfully moved to Courts.")
    else
        warn("Courts folder not found in workspace. Ensure it exists.")
    end
else
    warn("PracticeArea not found in workspace after waiting. Ensure the name and structure are correct.")
end

-- Wait for necessary UI objects
local success, Button = pcall(function()
    return Player:WaitForChild("PlayerGui"):WaitForChild("PowerUI"):WaitForChild("CursorButton")
end)

if not success or not Button then
    warn("Failed to find CursorButton in PowerUI. Ensure the UI exists and is properly loaded.")
    return
else
    print("CursorButton found successfully.")
end

-- Function to check if the player has a ball
local function PlayerHasBall()
    local character = Player.Character or Player.CharacterAdded:Wait()
    return character:FindFirstChild("Basketball") ~= nil 
end

-- Function to find the closest goal and calculate shot angle
local function GetPerfectShotDirection()
    local closestDistance = math.huge
    local closestGoal = nil
    local shotVector = nil

    for _, obj in pairs(workspace.Courts:GetDescendants()) do
        if obj.Name == "Swish" and obj.Parent:IsA("BasePart") then
            local character = Player.Character or Player.CharacterAdded:Wait()
            local torso = character:FindFirstChild("HumanoidRootPart")

            if torso then
                local distance = (torso.Position - obj.Parent.Position).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestGoal = obj.Parent
                end
            end
        end
    end

    if closestGoal then
        -- Calculate the perfect shot trajectory
        local targetPosition = closestGoal.Position + Vector3.new(0, 8, 0) -- Adjusted height
        shotVector = (targetPosition - Camera.CFrame.Position).unit -- Aim at the perfect spot
    end

    return shotVector
end

-- Function to simulate shooting with perfect alignment but no visual lock
local function ShootWithPerfectAim()
    local shotVector = GetPerfectShotDirection()

    if shotVector and PlayerHasBall() and Button then
        print("Calculated shot direction:", shotVector)

        -- Add a slight delay before simulating the shot
        task.wait(0.25)

        -- Get Button Position
        local buttonPosition = Button.AbsolutePosition + Button.AbsoluteSize / 2

        -- Simulate real mouse click on the UI button
        VirtualInputManager:SendMouseButtonEvent(buttonPosition.X, buttonPosition.Y, 0, true, game, 1)
        VirtualInputManager:SendMouseButtonEvent(buttonPosition.X, buttonPosition.Y, 0, false, game, 1)

        print("Button clicked. Shot taken with perfect aim!")
    else
        warn("Player doesn't have the ball, or no valid shot direction found. Shot not triggered.")
    end
end

-- Detect when the player jumps
local character = Player.Character or Player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

humanoid.Jumping:Connect(function()
    if PlayerHasBall() then
        print("Player jumped with the ball. Shooting with perfect aim (no camera lock).")
        ShootWithPerfectAim()
    else
        print("Player jumped without the ball. No shot taken.")
    end
end)
